'use client';

import React, { useState } from 'react';
import { Modal, Button, Text } from '@/components/slices';
import { useNotificationStore } from '@/stores/notificationStore';
import { useBrandsStore } from '@/stores/admin/adminBrandsStore';
import { AlertTriangle } from 'lucide-react';
import styles from './BrandModals.module.scss';


interface Brand {
  id: string;
  name: string;
  source: 'manual' | 'sync';
  modelsCount?: number;
}

interface DeleteBrandModalProps {
  isVisible: boolean;
  onClose: () => void;
  onConfirm: () => Promise<void>;
  brand: Brand | null;
  isLoading?: boolean;
}

export const DeleteBrandModal: React.FC<DeleteBrandModalProps> = ({
  isVisible,
  onClose,
  onConfirm,
  brand,
  isLoading: propIsLoading = false
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const { addNotification } = useNotificationStore();
  const { deleteBrand } = useBrandsStore();
  const handleConfirm = async () => {
    if (!brand) return;

    setIsLoading(true);
    try {
      // Call the store's delete function
      await deleteBrand(brand.id);

      addNotification({
        type: 'success',
        title: '╪к┘Е ╪з┘Д╪н╪░┘Б ╪и┘Ж╪м╪з╪н',
        message: `╪к┘Е ╪н╪░┘Б ╪з┘Д╪╣┘Д╪з┘Е╪й ╪з┘Д╪к╪м╪з╪▒┘К╪й "${brand.name}" ╪и┘Ж╪м╪з╪н.`,
        duration: 4000
      });

      onClose();
    } catch (error) {
      console.error('Error deleting brand:', error);
      addNotification({
        type: 'error',
        title: '╪о╪╖╪г ┘Б┘К ╪з┘Д╪н╪░┘Б',
        message: '┘Б╪┤┘Д ┘Б┘К ╪н╪░┘Б ╪з┘Д╪╣┘Д╪з┘Е╪й ╪з┘Д╪к╪м╪з╪▒┘К╪й. ┘К╪▒╪м┘Й ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Е╪▒╪й ╪г╪о╪▒┘Й.',
        duration: 5000
      });
    }
    setIsLoading(false);
  };

  if (!brand) {
    return null;
  }

  const hasModels = brand.modelsCount && brand.modelsCount > 0;
  const isFromSync = brand.source?.toLowerCase() === 'sync';

  return (
    <Modal
      isVisible={isVisible}
      onClose={onClose}
      title="╪к╪г┘Г┘К╪п ╪н╪░┘Б ╪з┘Д╪╣┘Д╪з┘Е╪й ╪з┘Д╪к╪м╪з╪▒┘К╪й"
      maxWidth="sm"
    >
      <div className={styles.deleteModal}>
        {/* Warning Icon */}
        <div className={styles.warningIcon}>
          <AlertTriangle size={48} color="var(--error)" />
        </div>

        {/* Content */}
        <div className={styles.deleteContent}>
          <Text variant="h3" className={styles.title}>
            ┘З┘Д ╪г┘Ж╪к ┘Е╪к╪г┘Г╪п ┘Е┘Ж ╪н╪░┘Б ┘З╪░┘З ╪з┘Д╪╣┘Д╪з┘Е╪й ╪з┘Д╪к╪м╪з╪▒┘К╪й╪Я
          </Text>

          <div className={styles.brandInfo}>
            <Text variant="paragraph">
              <strong>╪з╪│┘Е ╪з┘Д╪╣┘Д╪з┘Е╪й:</strong> {brand.name}
            </Text>
            <Text variant="paragraph">
              <strong>╪з┘Д┘Е╪╡╪п╪▒:</strong> {brand.source?.toLowerCase() === 'manual' ? '┘К╪п┘И┘К' : '┘Е╪▓╪з┘Е┘Ж╪й'}
            </Text>
            {hasModels && (
              <Text variant="paragraph">
                <strong>╪╣╪п╪п ╪з┘Д┘Е┘И╪п┘К┘Д╪з╪к:</strong> {brand.modelsCount}
              </Text>
            )}
          </div>

          {/* Warnings */}
          <div className={styles.warningSection}>
            <Text variant="small" color="error" className={styles.warningText}>
              тЪая╕П ╪к╪н╪░┘К╪▒: ┘З╪░╪з ╪з┘Д╪е╪м╪▒╪з╪б ┘Д╪з ┘К┘Е┘Г┘Ж ╪з┘Д╪к╪▒╪з╪м╪╣ ╪╣┘Ж┘З
            </Text>

            {hasModels && (
              <Text variant="small" color="error" className={styles.warningText}>
                тЪая╕П ╪│┘К╪к┘Е ╪н╪░┘Б ╪м┘Е┘К╪╣ ╪з┘Д┘Е┘И╪п┘К┘Д╪з╪к ({brand.modelsCount}) ╪з┘Д┘Е╪▒╪к╪и╪╖╪й ╪и┘З╪░┘З ╪з┘Д╪╣┘Д╪з┘Е╪й ╪з┘Д╪к╪м╪з╪▒┘К╪й
              </Text>
            )}

            {isFromSync && (
              <Text variant="small" color="warning" className={styles.warningText}>
                ЁЯТб ┘Е┘Д╪з╪н╪╕╪й: ┘З╪░┘З ╪з┘Д╪╣┘Д╪з┘Е╪й ╪з┘Д╪к╪м╪з╪▒┘К╪й ┘Е╪▓╪з┘Е┘Ж╪й ┘Е┘Ж API ╪о╪з╪▒╪м┘К╪М ┘В╪п ╪к╪╣┘И╪п ╪╣┘Ж╪п ╪з┘Д┘Е╪▓╪з┘Е┘Ж╪й ╪з┘Д╪к╪з┘Д┘К╪й
              </Text>
            )}

            <Text variant="small" color="error" className={styles.warningText}>
              тЪая╕П ╪│┘К╪к┘Е ╪н╪░┘Б ╪м┘Е┘К╪╣ ╪з┘Д╪е╪╣┘Д╪з┘Ж╪з╪к ╪з┘Д┘Е╪▒╪к╪и╪╖╪й ╪и┘З╪░┘З ╪з┘Д╪╣┘Д╪з┘Е╪й ╪з┘Д╪к╪м╪з╪▒┘К╪й ╪г┘К╪╢╪з┘Л
            </Text>
          </div>

          {/* Consequences */}
          <div className={styles.consequencesSection}>
            <Text variant="small" className={styles.consequencesTitle}>
              ╪з┘Д┘Ж╪к╪з╪ж╪м ╪з┘Д┘Е╪к╪▒╪к╪и╪й ╪╣┘Д┘Й ╪з┘Д╪н╪░┘Б:
            </Text>
            <ul className={styles.consequencesList}>
              <li>╪н╪░┘Б ╪з┘Д╪╣┘Д╪з┘Е╪й ╪з┘Д╪к╪м╪з╪▒┘К╪й ┘Ж┘З╪з╪ж┘К╪з┘Л</li>
              {hasModels && <li>╪н╪░┘Б ╪м┘Е┘К╪╣ ╪з┘Д┘Е┘И╪п┘К┘Д╪з╪к ({brand.modelsCount}) ╪з┘Д┘Е╪▒╪к╪и╪╖╪й</li>}
              <li>╪н╪░┘Б ╪м┘Е┘К╪╣ ╪з┘Д╪е╪╣┘Д╪з┘Ж╪з╪к ╪з┘Д╪к┘К ╪к╪│╪к╪о╪п┘Е ┘З╪░┘З ╪з┘Д╪╣┘Д╪з┘Е╪й</li>
              <li>┘Б┘В╪п╪з┘Ж ╪е╪н╪╡╪з╪ж┘К╪з╪к ┘З╪░┘З ╪з┘Д╪╣┘Д╪з┘Е╪й ╪з┘Д╪к╪м╪з╪▒┘К╪й</li>
              <li>╪╣╪п┘Е ╪е┘Е┘Г╪з┘Ж┘К╪й ╪з╪│╪к╪▒╪п╪з╪п ╪з┘Д╪и┘К╪з┘Ж╪з╪к ╪з┘Д┘Е╪н╪░┘И┘Б╪й</li>
            </ul>
          </div>

          {/* Alternative actions */}
          <div className={styles.alternativeSection}>
            <Text variant="small" color="secondary" className={styles.alternativeTitle}>
              ╪и╪п┘К┘Д ╪в┘Е┘Ж: ╪и╪п┘Д╪з┘Л ┘Е┘Ж ╪з┘Д╪н╪░┘Б╪М ┘К┘Е┘Г┘Ж┘Г:
            </Text>
            <ul className={styles.alternativesList}>
              <li>╪к╪║┘К┘К╪▒ ╪н╪з┘Д╪й ╪з┘Д╪╣┘Д╪з┘Е╪й ╪е┘Д┘Й "┘Е╪д╪▒╪┤┘Б" ┘Д╪е╪о┘Б╪з╪ж┘З╪з ╪п┘И┘Ж ╪н╪░┘Б┘З╪з</li>
              <li>╪к╪╣╪╖┘К┘Д ╪з┘Д╪╣┘Д╪з┘Е╪й ┘Е╪д┘В╪к╪з┘Л ╪н╪к┘Й ╪к┘В╪▒╪▒ ┘Д╪з╪н┘В╪з┘Л</li>
            </ul>
          </div>
        </div>

        {/* Actions */}
        <div className={styles.formActions}>
          <Button
            onClick={onClose}
            variant="secondary"
            disabled={isLoading}
          >
            ╪е┘Д╪║╪з╪б
          </Button>
          <Button
            onClick={handleConfirm}
            variant="danger"
            loading={isLoading}
            disabled={isLoading}
          >
            {isLoading ? '╪м╪з╪▒┘К ╪з┘Д╪н╪░┘Б...' : '┘Ж╪╣┘Е╪М ╪з╪н╪░┘Б ╪з┘Д╪╣┘Д╪з┘Е╪й ╪з┘Д╪к╪м╪з╪▒┘К╪й'}
          </Button>
        </div>
      </div>
    </Modal>
  );
};
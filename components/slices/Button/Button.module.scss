// Vue-style button with ripple effect (new main button style)
.btnPadding {
  padding: $space-sm $space-md !important;
}

.btn {
  // Button reset styles
  background: none;
  border: 1px solid $text;
  font: inherit;
  cursor: pointer;
  outline: none;
  // Layout
  display: inline-flex;
  align-items: center;
  gap: $space-sm;
  height: auto;
  border-radius: $radius-md;
  justify-content: center;
  padding: $space-sm;
  margin: 0;
  position: relative;
  overflow: hidden;
  min-width: 40px;
  text-decoration: none;
  transition: all 0.3s ease-out;

  // Variant styles
  &--primary {
    background-color: $primary;
    color: $text-inverse;
    border: none;

    &:hover {
      .round {
        background: $secondary;
        animation: rippleEffect 1.5s ease forwards;
      }
    }
  }

  &--secondary {
    background-color: $secondary;
    color: $text-inverse;
    border: none;

    &:hover {
      .round {
        background: $primary;
        animation: rippleEffect 1.5s ease forwards;
      }
    }
  }

  &--outline {
    background-color: $bg;
    border: 1px solid $border;
    color: $text;

    &:hover {
      background-color: $primary;
      color: $text-inverse;

      .round {
        background: $secondary;
        animation: rippleEffect 1.5s ease forwards;
      }
    }
  }

  &--success {
    background-color: $success;
    color: $text-inverse;
    border: none;

    &:hover .round {
      background: $primary;
      animation: rippleEffect 1.5s ease forwards;
    }
  }

  &--danger {
    background-color: $error;
    color: $text-inverse;
    border: none;

    &:hover .round {
      background: $primary;
      animation: rippleEffect 1.5s ease forwards;
    }
  }

  &--link {
    background: none;
    border: none;
    color: $text;
    text-decoration: underline;
    // padding: $space-xs $space-sm;
    margin: 0;
    min-width: auto;
    height: auto;

    font-weight: $font-base;

    &:hover {
      background-color: $primary;
      color: $text-inverse;
      text-decoration: none;

      .round {
        display: none; // No ripple effect for link variant
      }
    }

    &:focus {
      outline: 2px solid $primary;
      outline-offset: 2px;
    }

    .title {
      text-transform: none; // No uppercase for links
      font-weight: inherit;
      letter-spacing: normal;
      color: inherit;
    }
  }

  .arrow {
    font-size: 1.125rem;
    z-index: 1;
    transform: rotate(-45deg);
    transition: all 0.3s ease-out;
    display: flex;
    align-items: center;
  }

  .title {
    margin: 0;
    transition: all 0.3s ease-out;
    text-transform: uppercase;
    font-size: 1rem;
    font-weight: $weight-bold;
    letter-spacing: 1px;
    z-index: 1;
    display: flex;
    align-items: center;
    gap: $space-xs;
  }

  .round {
    width: 20px;
    height: 20px;
    position: absolute;
    display: block;
    content: "";
    border-radius: $radius-full;
    opacity: 1;

    &.ripple {
      left: 0;
      top: 0;
    }
  }

  @keyframes rippleEffect {
    0% {
      transform: scale(1);
      opacity: 0.11;
    }
    2% {
      transform: scale(1);
      opacity: 1;
    }
    100% {
      transform: scale(30);
    }
  }
}

.arrowLeft {
  display: none;
}

.arrowRight {
  display: block;
}

.loading {
  pointer-events: none;
  opacity: 0.7;
  cursor: not-allowed;

  // Disable hover effects when loading
  &:hover .round {
    animation: none !important;
  }
}

.loadingIcon {
  display: flex;
  align-items: center;
  justify-content: center;
  color: currentColor;

  // Style for SVG spinner when type="svg"
  svg {
    color: currentColor;
  }

  // Style for three-dot loader
  .threeDots {
    color: currentColor;
  }
}
// Disabled state styles
.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  pointer-events: none;

  // Disable hover effects when disabled
  &:hover {
    background-color: inherit;
    color: inherit;

    .round {
      animation: none !important;
    }
  }
}

.icon {
  display: flex;
  align-items: center;
  justify-content: center;
}

.themeToggle {
  font-size: $font-lg;
  transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);

  &:hover {
    transform: scale(1.1);
  }

  &:active {
    transform: scale(0.95);
  }
}

// Optional margin - only applied when margin prop is true
.withMargin {
  margin: $space-md $space-sm;

  @media screen and (max-width: 768px) {
    margin: $space-sm $space-xs;
  }
}
